data dir
/lunarc/nobackup/users/albheim/EEG-klassificering
script
#!/bin/sh
#SBATCH -t 60:00:00
#SBATCH -J bestall
#SBATCH -A lu2018-2-3
#// SBATCH -o stdout_%j.out
#// SBATCH -e stderr_%j.err

# shold be lu or gpu
#SBATCH -p gpu

# how many gpus, 4 per node, using many seems to crash more often so stick with 1
#SBATCH --gres=gpu:1

# use 5 cores per GPU
#SBATCH -n 5
#SBATCH --mem-per-cpu=3100

DATA_DIR="$(cat ../data_location.txt)"
echo "data dir"
echo $DATA_DIR

echo "script"
cat $0

PY_FILE="best_all.py"
echo "py file"
cat $PY_FILE

echo "nvidia smi"
nvidia-smi

echo "start time"
date

cp -r "${DATA_DIR}/DATA" $SNIC_TMP
ls $SNIC_TMP
du -h "${SNIC_TMP}/DATA"

echo "copy done time"
date

python $PY_FILE $SNIC_TMP

echo "end time"
date
py file
import sys
from datetime import datetime

import numpy as np
from scipy import io

import tensorflow as tf

from keras.models import Sequential, Model
from keras.layers import Dense, Dropout, Input, GaussianNoise, BatchNormalization
from keras.layers import TimeDistributed, Lambda, AlphaDropout
from keras.layers import SimpleRNN, RNN, LSTM, GRU
from keras.layers import Conv1D, MaxPooling1D, Flatten
from keras.layers import ELU, PReLU, Activation, AveragePooling1D

from keras.optimizers import SGD, Adam, RMSprop, Nadam
from keras import regularizers as rg
from keras import backend as K

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

import data
import util


x, y = data.load_single(cut=True, visual=True, study=True, transpose=True)
xt, yt = data.load_single(cut=True, visual=True, study=False, transpose=True)
print(x[0].shape, xt[0].shape)

x = np.concatenate(x, axis=0)
y = np.concatenate(y, axis=0)
xt = np.concatenate(xt, axis=0)
yt = np.concatenate(yt, axis=0)
print(x.shape, xt.shape)

splits = 10

def offset_slice(inputs):
    w = 630
    r = np.random.randint(inputs.shape[1] - w + 1)
    return inputs[:, r:r + w, :]


m_in = Input(shape=x[0].shape)
m_off = Lambda(offset_slice)(m_in)
m_noise = GaussianNoise(np.std(x[0] / 100))(m_off) # how much noice to have????

m_t = Conv1D(30, 64, padding='causal', kernel_regularizer=rg.l1(0.01))(m_noise)
m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling1D(2)(m_t)
m_t = Dropout(0.2)(m_t)

m_t = Conv1D(15, 32, padding='causal', kernel_regularizer=rg.l1(0.01))(m_t)
m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling1D(2)(m_t)
m_t = Dropout(0.3)(m_t)

m_t = Conv1D(10, 16, padding='causal', kernel_regularizer=rg.l1(0.01))(m_t)
m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling1D(2)(m_t)
m_t = Dropout(0.4)(m_t)

m_t = Flatten()(m_t)
# m_t = Dense(35)(m_t)
# m_t = BatchNormalization()(m_t)
# m_t = Activation('tanh')(m_t)
m_t = Dense(15, kernel_regularizer=rg.l1(0.01))(m_t)
m_t = BatchNormalization()(m_t)
m_t = Activation('tanh')(m_t)
m_out = Dense(3, activation='softmax')(m_t)

model = Model(inputs=m_in, outputs=m_out)

m_save = model.get_config()
model.summary()

n = x.shape[0]
acc = 0
acc2 = 0
for tr, val in util.kfold(n, splits, shuffle=True):
    # recreate model
    model = Model.from_config(m_save)
    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    # fit with next kfold data
    h = model.fit(x[tr], y[tr],
                  # validation_data=(x[i][val], y[i][val]),
                  batch_size=64, epochs=200, verbose=0)

    _, a = model.evaluate(x[val], y[val], verbose=0)
    _, a2 = model.evaluate(xt, yt, verbose=0)
    acc += a
    acc2 += a2

K.clear_session()

acc /= splits
acc2 /= splits

print("avg accuracy {}/{} over {} splits".format(acc, acc2, splits))
nvidia smi
Fri Apr 13 12:10:02 2018       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 384.81                 Driver Version: 384.81                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Tesla K80           On   | 00000000:04:00.0 Off |                    0 |
| N/A   55C    P0    78W / 149W |  10974MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   1  Tesla K80           On   | 00000000:05:00.0 Off |                    0 |
| N/A   53C    P8    33W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   2  Tesla K80           On   | 00000000:84:00.0 Off |                    0 |
| N/A   25C    P8    26W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   3  Tesla K80           On   | 00000000:85:00.0 Off |                    0 |
| N/A   32C    P8    29W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|    0    147807      C   python                                     10961MiB |
+-----------------------------------------------------------------------------+
start time
Fri Apr 13 12:10:02 CEST 2018
DATA
2.4G	/local/slurmtmp.611434/DATA/Visual
2.4G	/local/slurmtmp.611434/DATA/Verbal
388M	/local/slurmtmp.611434/DATA/Modified/marginal
16G	/local/slurmtmp.611434/DATA/Modified/spectogram
16G	/local/slurmtmp.611434/DATA/Modified
21G	/local/slurmtmp.611434/DATA
copy done time
Fri Apr 13 12:14:22 CEST 2018
2018-04-13 12:14:31.615737: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-04-13 12:14:31.692869: E tensorflow/stream_executor/cuda/cuda_driver.cc:406] failed call to cuInit: CUDA_ERROR_NOT_INITIALIZED
2018-04-13 12:14:31.692977: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: ag05
2018-04-13 12:14:31.693012: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:165] hostname: ag05
2018-04-13 12:14:31.693103: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] libcuda reported version is: 384.81.0
2018-04-13 12:14:31.693162: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:369] driver version file contents: """NVRM version: NVIDIA UNIX x86_64 Kernel Module  384.81  Sat Sep  2 02:43:11 PDT 2017
GCC version:  gcc version 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC) 
"""
2018-04-13 12:14:31.693215: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:193] kernel reported version is: 384.81.0
2018-04-13 12:14:31.693245: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:300] kernel version seems to match DSO: 384.81.0
/home/albheim/.conda/envs/test/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
Using TensorFlow backend.
[name: "/device:CPU:0"
device_type: "CPU"
memory_limit: 268435456
locality {
}
incarnation: 4135385027241674645
]
loading:  Subj01_CleanData_study_FA
loading:  Subj01_CleanData_study_LM
loading:  Subj01_CleanData_study_OB
loading:  Subj02_CleanData_study_FA
loading:  Subj02_CleanData_study_LM
loading:  Subj02_CleanData_study_OB
loading:  Subj03_CleanData_study_FA
loading:  Subj03_CleanData_study_LM
loading:  Subj03_CleanData_study_OB
loading:  Subj04_CleanData_study_FA
loading:  Subj04_CleanData_study_LM
loading:  Subj04_CleanData_study_OB
loading:  Subj05_CleanData_study_FA
loading:  Subj05_CleanData_study_LM
loading:  Subj05_CleanData_study_OB
loading:  Subj06_CleanData_study_FA
loading:  Subj06_CleanData_study_LM
loading:  Subj06_CleanData_study_OB
loading:  Subj07_CleanData_study_FA
loading:  Subj07_CleanData_study_LM
loading:  Subj07_CleanData_study_OB
loading:  Subj08_CleanData_study_FA
loading:  Subj08_CleanData_study_LM
loading:  Subj08_CleanData_study_OB
loading:  Subj09_CleanData_study_FA
loading:  Subj09_CleanData_study_LM
loading:  Subj09_CleanData_study_OB
loading:  Subj11_CleanData_study_FA
loading:  Subj11_CleanData_study_LM
loading:  Subj11_CleanData_study_OB
loading:  Subj12_CleanData_study_FA
loading:  Subj12_CleanData_study_LM
loading:  Subj12_CleanData_study_OB
loading:  Subj13_CleanData_study_FA
loading:  Subj13_CleanData_study_LM
loading:  Subj13_CleanData_study_OB
loading:  Subj14_CleanData_study_FA
loading:  Subj14_CleanData_study_LM
loading:  Subj14_CleanData_study_OB
loading:  Subj15_CleanData_study_FA
loading:  Subj15_CleanData_study_LM
loading:  Subj15_CleanData_study_OB
loading:  Subj16_CleanData_study_FA
loading:  Subj16_CleanData_study_LM
loading:  Subj16_CleanData_study_OB
loading:  Subj17_CleanData_study_FA
loading:  Subj17_CleanData_study_LM
loading:  Subj17_CleanData_study_OB
loading:  Subj18_CleanData_study_FA
loading:  Subj18_CleanData_study_LM
loading:  Subj18_CleanData_study_OB
loading:  Subj19_CleanData_study_FA
loading:  Subj19_CleanData_study_LM
loading:  Subj19_CleanData_study_OB
loading:  Subj01_CleanData_test_FA_visual
loading:  Subj01_CleanData_test_LM_visual
loading:  Subj01_CleanData_test_OB_visual
loading:  Subj02_CleanData_test_FA_visual
loading:  Subj02_CleanData_test_LM_visual
loading:  Subj02_CleanData_test_OB_visual
loading:  Subj03_CleanData_test_FA_visual
loading:  Subj03_CleanData_test_LM_visual
loading:  Subj03_CleanData_test_OB_visual
loading:  Subj04_CleanData_test_FA_visual
loading:  Subj04_CleanData_test_LM_visual
loading:  Subj04_CleanData_test_OB_visual
loading:  Subj05_CleanData_test_FA_visual
loading:  Subj05_CleanData_test_LM_visual
loading:  Subj05_CleanData_test_OB_visual
loading:  Subj06_CleanData_test_FA_visual
loading:  Subj06_CleanData_test_LM_visual
loading:  Subj06_CleanData_test_OB_visual
loading:  Subj07_CleanData_test_FA_visual
loading:  Subj07_CleanData_test_LM_visual
loading:  Subj07_CleanData_test_OB_visual
loading:  Subj08_CleanData_test_FA_visual
loading:  Subj08_CleanData_test_LM_visual
loading:  Subj08_CleanData_test_OB_visual
loading:  Subj09_CleanData_test_FA_visual
loading:  Subj09_CleanData_test_LM_visual
loading:  Subj09_CleanData_test_OB_visual
loading:  Subj11_CleanData_test_FA_visual
loading:  Subj11_CleanData_test_LM_visual
loading:  Subj11_CleanData_test_OB_visual
loading:  Subj12_CleanData_test_FA_visual
loading:  Subj12_CleanData_test_LM_visual
loading:  Subj12_CleanData_test_OB_visual
loading:  Subj13_CleanData_test_FA_visual
loading:  Subj13_CleanData_test_LM_visual
loading:  Subj13_CleanData_test_OB_visual
loading:  Subj14_CleanData_test_FA_visual
loading:  Subj14_CleanData_test_LM_visual
loading:  Subj14_CleanData_test_OB_visual
loading:  Subj15_CleanData_test_FA_visual
loading:  Subj15_CleanData_test_LM_visual
loading:  Subj15_CleanData_test_OB_visual
loading:  Subj16_CleanData_test_FA_visual
loading:  Subj16_CleanData_test_LM_visual
loading:  Subj16_CleanData_test_OB_visual
loading:  Subj17_CleanData_test_FA_visual
loading:  Subj17_CleanData_test_LM_visual
loading:  Subj17_CleanData_test_OB_visual
loading:  Subj18_CleanData_test_FA_visual
loading:  Subj18_CleanData_test_LM_visual
loading:  Subj18_CleanData_test_OB_visual
loading:  Subj19_CleanData_test_FA_visual
loading:  Subj19_CleanData_test_LM_visual
loading:  Subj19_CleanData_test_OB_visual
(185, 768, 31) (90, 768, 31)
(3358, 768, 31) (1699, 768, 31)
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         (None, 768, 31)           0         
_________________________________________________________________
lambda_1 (Lambda)            (None, 630, 31)           0         
_________________________________________________________________
gaussian_noise_1 (GaussianNo (None, 630, 31)           0         
_________________________________________________________________
conv1d_1 (Conv1D)            (None, 630, 30)           59550     
_________________________________________________________________
batch_normalization_1 (Batch (None, 630, 30)           120       
_________________________________________________________________
elu_1 (ELU)                  (None, 630, 30)           0         
_________________________________________________________________
average_pooling1d_1 (Average (None, 315, 30)           0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 315, 30)           0         
_________________________________________________________________
conv1d_2 (Conv1D)            (None, 315, 15)           14415     
_________________________________________________________________
batch_normalization_2 (Batch (None, 315, 15)           60        
_________________________________________________________________
elu_2 (ELU)                  (None, 315, 15)           0         
_________________________________________________________________
average_pooling1d_2 (Average (None, 157, 15)           0         
_________________________________________________________________
dropout_2 (Dropout)          (None, 157, 15)           0         
_________________________________________________________________
conv1d_3 (Conv1D)            (None, 157, 10)           2410      
_________________________________________________________________
batch_normalization_3 (Batch (None, 157, 10)           40        
_________________________________________________________________
elu_3 (ELU)                  (None, 157, 10)           0         
_________________________________________________________________
average_pooling1d_3 (Average (None, 78, 10)            0         
_________________________________________________________________
dropout_3 (Dropout)          (None, 78, 10)            0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 780)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 15)                11715     
_________________________________________________________________
batch_normalization_4 (Batch (None, 15)                60        
_________________________________________________________________
activation_1 (Activation)    (None, 15)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 3)                 48        
=================================================================
Total params: 88,418
Trainable params: 88,278
Non-trainable params: 140
_________________________________________________________________
avg accuracy 0.5938201849860508/0.33531489111592727 over 10 splits
end time
Fri Apr 13 23:07:47 CEST 2018
slurmstepd: error: Exceeded step memory limit at some point.
slurmstepd: error: Exceeded job memory limit at some point.
