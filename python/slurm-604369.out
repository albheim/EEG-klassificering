data dir
/lunarc/nobackup/users/albheim/EEG-klassificering
script
#!/bin/sh
#SBATCH -t 60:00:00
#SBATCH -J ach5n
#SBATCH -A lu2018-2-3
#// SBATCH -o stdout_%j.out
#// SBATCH -e stderr_%j.err

# shold be lu or gpu
#SBATCH -p gpu

# how many gpus, 4 per node, using many seems to crash more often so stick with 1
#SBATCH --gres=gpu:4

# use 5 cores per GPU
#SBATCH -n 20
#SBATCH --mem-per-cpu=3100

DATA_DIR="$(cat ../data_location.txt)"
echo "data dir"
echo $DATA_DIR

echo "script"
cat $0

PY_FILE="conv2d_spect.py"
echo "py file"
cat $PY_FILE

echo "mat file"
cat "../matlab/save transformed/savetf.m"

echo "nvidia smi"
nvidia-smi

echo "start time"
date

cp -r "${DATA_DIR}/DATA" $SNIC_TMP
ls $SNIC_TMP
du -h "${SNIC_TMP}/DATA"

echo "copy done time"
date

matlab -nodisplay -nosplash -nodesktop -r "run('../matlab/save transformed/savetf.m');"
python $PY_FILE $SNIC_TMP

echo "end time"
date
py file
import sys
from datetime import datetime

import numpy as np
from scipy import io

import tensorflow as tf

from keras.models import Model
from keras.layers import Dense, Dropout, Input, GaussianNoise, BatchNormalization
from keras.layers import Lambda
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import ELU, Activation, Flatten

from keras import backend as K

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

import data
import util


x, y = data.load_spect([5])

splits = 5

# channels = [4, 23]
# for i in range(n_subs):
#     x[i] = x[i][:, :, channels]
#     xt[i] = xt[i][:, :, channels]


m_in = Input(shape=x[0][0].shape)

m_t = Conv2D(4, (8, 8), padding='same')(m_in)
#m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling2D((4, 2))(m_t)
m_t = Dropout(0.2)(m_t)

m_t = Conv2D(8, (8, 8), padding='same')(m_t)
#m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling2D((4, 2))(m_t)
m_t = Dropout(0.3)(m_t)

m_t = Conv2D(16, (8, 8), padding='same')(m_t)
#m_t = BatchNormalization()(m_t)
m_t = ELU()(m_t)
m_t = AveragePooling2D((2, 2))(m_t)
m_t = Dropout(0.4)(m_t)

m_t = Flatten()(m_t)
m_t = Dense(15)(m_t)
#m_t = BatchNormalization()(m_t)
m_t = Activation('tanh')(m_t)
m_out = Dense(3, activation='softmax')(m_t)

model = Model(inputs=m_in, outputs=m_out)

m_save = model.get_config()
model.summary()

acc = 0
for tr, val in util.kfold(len(x[0]), splits, shuffle=True):

    model = Model.from_config(m_save)
    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    # fit with next kfold data
    h = model.fit(x[0][tr], y[0][tr],
                  #validation_data=(x[val], y[val]),
                  batch_size=16, epochs=50, verbose=0)

    _, a = model.evaluate(x[0][val], y[0][val], verbose=0)
    acc += a

acc /= splits

print("avg accuracy {} over {} splits".format(acc, splits))
mat file
clear; clc; close all
addpath('..')
addpath('../borrowed code')
[X,Y,n] = aux_load('Visual','05');

param.L = 8; param.Fs = 512; param.NFFT = 1024; param.NSTEP = 2;

%X = aux_chan(X,[5 24]);
X = aux_extr(X, 769:1024);
%X = aux_deci(X,2);
X = aux_svd(X, 1);
X = aux_transform(X, 'spec', param);

for i = 1:length(X)
    X{i} = permute(X{i}, [2 3 1]);
end

size(X{1})

%save('C:\Users\Albin Heimerson\Desktop\exjobb\DATA\Modified\spectogram\X6.mat', 'X','-v7.3')
%save('C:\Users\Albin Heimerson\Desktop\exjobb\DATA\Modified\spectogram\Y6.mat', 'Y','-v7.3')

save('/lunarc/nobackup/users/albheim/EEG-klassificering/DATA/Modified/spectogram/U5.mat', 'X', 'Y', '-v7.3')
nvidia smi
Tue Apr 10 14:00:40 2018       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 384.81                 Driver Version: 384.81                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Tesla K80           On   | 00000000:04:00.0 Off |                    0 |
| N/A   25C    P8    27W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   1  Tesla K80           On   | 00000000:05:00.0 Off |                    0 |
| N/A   31C    P8    31W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   2  Tesla K80           On   | 00000000:84:00.0 Off |                    0 |
| N/A   25C    P8    26W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   3  Tesla K80           On   | 00000000:85:00.0 Off |                    0 |
| N/A   32C    P8    30W / 149W |      1MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
start time
Tue Apr 10 14:00:40 CEST 2018
DATA
2.4G	/local/slurmtmp.604369/DATA/Visual
2.4G	/local/slurmtmp.604369/DATA/Verbal
388M	/local/slurmtmp.604369/DATA/Modified/marginal
2.9G	/local/slurmtmp.604369/DATA/Modified/spectogram
3.3G	/local/slurmtmp.604369/DATA/Modified
7.9G	/local/slurmtmp.604369/DATA
copy done time
Tue Apr 10 14:00:47 CEST 2018

                            < M A T L A B (R) >
                  Copyright 1984-2017 The MathWorks, Inc.
                   R2017b (9.3.0.713579) 64-bit (glnxa64)
                             September 14, 2017

 
To get started, type one of these: helpwin, helpdesk, or demo.
For product information, visit www.mathworks.com.
 

ans =

   128   512

>> 2018-04-10 14:01:19.305299: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-04-10 14:01:19.675427: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:04:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2018-04-10 14:01:19.895310: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 1 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:05:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2018-04-10 14:01:20.143107: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 2 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:84:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2018-04-10 14:01:20.375355: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 3 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 0000:85:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2018-04-10 14:01:20.376008: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Device peer to peer matrix
2018-04-10 14:01:20.376112: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1051] DMA: 0 1 2 3 
2018-04-10 14:01:20.376140: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 0:   Y Y N N 
2018-04-10 14:01:20.376159: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 1:   Y Y N N 
2018-04-10 14:01:20.376176: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 2:   N N Y Y 
2018-04-10 14:01:20.376192: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1061] 3:   N N Y Y 
2018-04-10 14:01:20.376220: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla K80, pci bus id: 0000:04:00.0, compute capability: 3.7)
2018-04-10 14:01:20.376263: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:1) -> (device: 1, name: Tesla K80, pci bus id: 0000:05:00.0, compute capability: 3.7)
2018-04-10 14:01:20.376287: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:2) -> (device: 2, name: Tesla K80, pci bus id: 0000:84:00.0, compute capability: 3.7)
2018-04-10 14:01:20.376306: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:3) -> (device: 3, name: Tesla K80, pci bus id: 0000:85:00.0, compute capability: 3.7)
2018-04-10 14:01:22.089527: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla K80, pci bus id: 0000:04:00.0, compute capability: 3.7)
2018-04-10 14:01:22.089630: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:1) -> (device: 1, name: Tesla K80, pci bus id: 0000:05:00.0, compute capability: 3.7)
2018-04-10 14:01:22.089658: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:2) -> (device: 2, name: Tesla K80, pci bus id: 0000:84:00.0, compute capability: 3.7)
2018-04-10 14:01:22.089679: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:3) -> (device: 3, name: Tesla K80, pci bus id: 0000:85:00.0, compute capability: 3.7)
/home/albheim/.conda/envs/test/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
Using TensorFlow backend.
[name: "/device:CPU:0"
device_type: "CPU"
memory_limit: 268435456
locality {
}
incarnation: 12318777949732525577
, name: "/device:GPU:0"
device_type: "GPU"
memory_limit: 11324823962
locality {
  bus_id: 1
}
incarnation: 5840568919941161669
physical_device_desc: "device: 0, name: Tesla K80, pci bus id: 0000:04:00.0, compute capability: 3.7"
, name: "/device:GPU:1"
device_type: "GPU"
memory_limit: 11322831668
locality {
  bus_id: 1
}
incarnation: 12904353435136111676
physical_device_desc: "device: 1, name: Tesla K80, pci bus id: 0000:05:00.0, compute capability: 3.7"
, name: "/device:GPU:2"
device_type: "GPU"
memory_limit: 11324699444
locality {
  bus_id: 2
}
incarnation: 7987440089489327676
physical_device_desc: "device: 2, name: Tesla K80, pci bus id: 0000:84:00.0, compute capability: 3.7"
, name: "/device:GPU:3"
device_type: "GPU"
memory_limit: 11322831668
locality {
  bus_id: 2
}
incarnation: 851008568720645471
physical_device_desc: "device: 3, name: Tesla K80, pci bus id: 0000:85:00.0, compute capability: 3.7"
]
/local/slurmtmp.604369/DATA/Modified/spectogram/U5.mat
(1, 187)
(1, 187)
(187, 512, 128, 1)
(512, 128, 1)
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_1 (InputLayer)         (None, 512, 128, 1)       0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 512, 128, 4)       260       
_________________________________________________________________
elu_1 (ELU)                  (None, 512, 128, 4)       0         
_________________________________________________________________
average_pooling2d_1 (Average (None, 128, 64, 4)        0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 128, 64, 4)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 128, 64, 8)        2056      
_________________________________________________________________
elu_2 (ELU)                  (None, 128, 64, 8)        0         
_________________________________________________________________
average_pooling2d_2 (Average (None, 32, 32, 8)         0         
_________________________________________________________________
dropout_2 (Dropout)          (None, 32, 32, 8)         0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 32, 32, 16)        8208      
_________________________________________________________________
elu_3 (ELU)                  (None, 32, 32, 16)        0         
_________________________________________________________________
average_pooling2d_3 (Average (None, 16, 16, 16)        0         
_________________________________________________________________
dropout_3 (Dropout)          (None, 16, 16, 16)        0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 4096)              0         
_________________________________________________________________
dense_1 (Dense)              (None, 15)                61455     
_________________________________________________________________
activation_1 (Activation)    (None, 15)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 3)                 48        
=================================================================
Total params: 72,027
Trainable params: 72,027
Non-trainable params: 0
_________________________________________________________________
avg accuracy 0.2564722629351433 over 5 splits
end time
Tue Apr 10 14:02:56 CEST 2018
